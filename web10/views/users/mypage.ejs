<style>
  .title {
    width: 200px;
  }
</style>

<div class="row mt-5 justify-content-center">
  <div class="col-md-8 p-3">
    <h1 class="text-center mb-5">
      <%=title%>
    </h1>
    <!--form은 class가 아니라 name으로 지정해야 함-->
    <form name="frm">
      <div class="input-group mb-3">
        <div class="title input-group-text justify-content-center">이메일</div>
        <input name="email" class="form-control" readonly>
        <!--readonly: 수정안됨, 읽기만 가능-->
      </div>
      <div class="input-group mb-3">
        <div class="title input-group-text justify-content-center">성명</div>
        <input name="name" class="form-control" value="무기명">
      </div>
      <div class="input-group mb-3">
        <div class="title input-group-text justify-content-center">전화번호</div>
        <input name="phone" class="form-control" value="010-1010-1010">
      </div>
      <div class="input-group mb-1">
        <div class="title input-group-text justify-content-center">주소</div>
        <input name="address1" class="form-control">
        <button type="button" class="btn btn-primary search">검색</button>
      </div>
      <!--placeholder : input 상자 안에서 힌트 주는 용도-->
      <input name="address2" class="form-control" placeholder="상세주소">
      <div class="text-center mt-3">
        <!--button : 일반/submit/reset, type 미지정 시 submit으로 됨-->
        <button type="submit" class="btn btn-primary">정보저장</button>
        <button type="reset" class="btn btn-secondary">저장취소</button>
      </div>
    </form>
  </div>
</div>
<script type="module">
  import { app } from '/javascripts/config.js'
  import { getDatabase, onValue, ref, set } from "https://www.gstatic.com/firebasejs/10.14.1/firebase-database.js";
  const db = getDatabase(app);

  $(frm.email).val(email);

  // 정보 읽기
  onValue(ref(db, `users/${uid}`), snapshot => {
    const user = snapshot.val();
    $(frm.name).val(user.name);
    $(frm.phone).val(user.phone);
    $(frm.address1).val(user.address1);
    $(frm.address2).val(user.address2);
  });

  // 저장 취소 버튼을 클릭한 경우
  $(frm).on("reset", function (e) {
    e.preventDefault();
    if (confirm("취소하시겠습니까?")) {
      location.reload();
    }
  });

  // 저장 버튼을 클릭한 경우
  $(frm).on("submit", async function (e) {
    e.preventDefault();
    if (confirm("변경한 정보를 수정하시겠습니까?")) {
      // 정보 수정
      const user = { email, name: $(frm.name).val(), phone: $(frm.phone).val(), address1: $(frm.address1).val(), address2: $(frm.address2).val() }
      await set(ref(db, `users/${uid}`), user);
      alert("정보 저장!");
    }
  });

  // 검색 버튼을 클릭한 경우
  $(".search").on("click", function () {
    new daum.Postcode({
      oncomplete: function (data) {
        // bulidingName에 주소가 있으면 주소 넣어주기
        const address = data.bulidingName != "" ? `${data.address}(${data.bulidingName})` : data.address
        $(frm.address1).val(address);
      }
    }).open();
  });
</script>